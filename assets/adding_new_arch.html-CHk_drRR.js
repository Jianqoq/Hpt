import{_ as s,c as a,d as e,o as t}from"./app-7udonsSP.js";const o={};function p(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1>Adding New Arch Support</h1><h3>Things to know</h3><p>If you found that the CPU you are using has the Simd instruction Hpt is not supported and you are willing to add support for that instruction like <code>avx512f</code>.</p><h3>How</h3><ol><li><p>All the Tensor operations are using implementation from <code>hpt-types/scalars/simd</code> and <code>hpt-types/vectors/arch_simd</code>.</p></li><li><p>The folder <code>vectors</code> defines the simd vectors for simd registers with different size of bits. If your simd register is using <code>128-bit</code> and the instruction is not supported. You will want to go to <code>arch_simd/_128bit</code> folder, for each of the different type, you will need to add the computation for the new instruction.</p></li></ol><p>Example:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">impl</span> <span class="token class-name">PartialEq</span> <span class="token keyword">for</span> f32x4 <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[inline(always)]</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">eq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">&quot;x86_64&quot;</span>)]</span></span>
<span class="line">        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> cmp <span class="token operator">=</span> <span class="token function">_mm_cmpeq_ps</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span> other<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">_mm_movemask_ps</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">&quot;aarch64&quot;</span>)]</span></span>
<span class="line">        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> cmp <span class="token operator">=</span> <span class="token function">vceqq_f32</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span> other<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">vminvq_u32</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xffffffff_u32</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">&quot;...&quot;</span>)]</span> <span class="token comment">// new arch</span></span>
<span class="line">        <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// new computation</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>The folder <code>scalars</code> defines the scalar computations. Most of the time you don&#39;t need to do anything on this folder unless for some scalar computation, your CPU has special instruction to perform that computation.</p></li><li><p>The file <code>convertion.rs</code> defines the type conversion traits and uses proc_macro defined from <code>hpt-macros</code> crate to auto implement the type conversion. If your CPU has special conversion instruction, you may want to go to the <code>hpt-macros</code> and modify the macro code. The file <code>into_scalar.rs</code> is just using the method from <code>convertion.rs</code>, you won&#39;t need to worry about this file</p></li><li><p>After you finished all the steps above, you can start to run the hpt-tests crate and make sure all the tests passed.</p></li><li><p>Make a pull request.</p></li></ol>`,8)]))}const l=s(o,[["render",p],["__file","adding_new_arch.html.vue"]]),r=JSON.parse('{"path":"/dev_guide/adding_new_arch.html","title":"Adding New Arch Support","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Things to know","slug":"things-to-know","link":"#things-to-know","children":[]},{"level":3,"title":"How","slug":"how","link":"#how","children":[]}],"git":{"updatedTime":1739437252000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"120760306+Jianqoq@users.noreply.github.com","commits":1,"url":"https://github.com/Jianqoq"}]},"filePathRelative":"dev_guide/adding_new_arch.md"}');export{l as comp,r as data};
