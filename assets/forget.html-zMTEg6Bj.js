import{_ as s,c as a,d as e,o as t}from"./app-DXqrPI4k.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1>forget</h1><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">forget</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token namespace">cudarc<span class="token punctuation">::</span>driver<span class="token punctuation">::</span></span><span class="token class-name">CudaSlice</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>alloc<span class="token punctuation">::</span></span><span class="token class-name">Layout</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Transfers ownership of the tensor&#39;s memory to the caller, returning the raw pointer and layout information.</p><h2>Note</h2><p>This method &quot;forgets&quot; about the tensor&#39;s memory without deallocating it, allowing you to take manual control of the memory management. Once called, the tensor&#39;s destructor will not free the underlying memory - the caller becomes responsible for proper deallocation.</p><h2>Parameters:</h2><p><code>x</code>: The input tensor whose memory ownership will be transferred</p><h2>Returns:</h2><p><code>cudarc::driver::CudaSlice&lt;u8&gt;</code>: A slice pointing to the tensor&#39;s data <code>std::alloc::Layout</code>: Can be used to check the byte size</p><h2>Examples:</h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">TensorError</span><span class="token punctuation">,</span> <span class="token class-name">Tensor</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create a tensor with f32 values</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.7</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_cuda</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Transfer ownership of the memory to the caller</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>raw_ptr<span class="token punctuation">,</span> layout<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> a<span class="token punctuation">.</span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// raw_ptr drop will be called when a goes out of scope, memory will be deallocated</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const i=s(p,[["render",o]]),u=JSON.parse('{"path":"/user_guide/associated_methods/cuda/forget.html","title":"forget","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744835383000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"ljj1849532909@gmail.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"ee8463f9187eff59dd5650a34a651d2c879e0a5d","time":1744835383000,"email":"ljj1849532909@gmail.com","author":"Jianqoq","message":"Update .gitignore and remove package-lock.json"}]},"filePathRelative":"user_guide/associated_methods/cuda/forget.md"}');export{i as comp,u as data};
