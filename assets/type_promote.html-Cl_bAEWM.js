import{_ as n,c as a,a as t,o as s}from"./app-BbazmxpU.js";const o={};function p(r,e){return s(),a("div",null,e[0]||(e[0]=[t(`<h3 id="type-promote" tabindex="-1"><a class="header-anchor" href="#type-promote"><span>Type Promote</span></a></h3><p>The type promotion system in Hpt handles type conversions and operations between different numeric types.</p><h3 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h3><p>The type promotion system provides auto casting for different types</p><h3 id="core-traits" tabindex="-1"><a class="header-anchor" href="#core-traits"><span>Core Traits</span></a></h3><p><code>pub trait FloatOutBinaryPromote&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L59" target="_blank" rel="noopener noreferrer">here</a></p><p><code>pub trait NormalOutPromote&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L126" target="_blank" rel="noopener noreferrer">here</a></p><p><code>pub trait SimdCmpPromote&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L312" target="_blank" rel="noopener noreferrer">here</a></p><p><code>pub trait FloatOutUnaryPromote</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L575" target="_blank" rel="noopener noreferrer">here</a></p><h3 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation"><span>Implementation</span></a></h3><p>The implementation is straightforward. See <a href="https://github.com/Jianqoq/Hpt/tree/main/hpt-types/src/promotion" target="_blank" rel="noopener noreferrer">here</a></p><h3 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>Note</span></a></h3><p>Current implementation only supports one type of promotion. Like u32 + i32 = i32. We may want to have multiple version of promotion. The user may want u32 + i32 = i64. Adding new version is straightforward and just simply using the existing code and do little modification.</p><h3 id="how" tabindex="-1"><a class="header-anchor" href="#how"><span>How</span></a></h3><ol><li>create a new feature that the user can choose in file <code>hpt-types/Cargo.toml</code></li></ol><div class="language-cargo line-numbers-mode" data-highlighter="prismjs" data-ext="cargo" data-title="cargo"><pre><code><span class="line">[features]</span>
<span class="line">.. // features</span>
<span class="line">default = [.., &quot;normal_promote&quot;]</span>
<span class="line">normal_promote = []</span>
<span class="line">// new_promote = []</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>Go to <code>hpt-types/src/promotion</code>, create a new folder, like <code>new_promote/</code></p></li><li><p>create files under <code>hpt-types/src/promotion/new_promote/</code> like how we create in <code>hpt-types/src/promotion/normal_promote/</code>, then write promotion logic for the new promote.</p></li><li><p>Go to <code>lib.rs</code> and add new <code>mod</code> in promotion mod</p></li></ol><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">promotion</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute attr-name">#[cfg(feature = <span class="token string">&quot;normal_promote&quot;</span>)]</span></span>
<span class="line">    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">normal_promote</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">..</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token attribute attr-name">#[cfg(feature = <span class="token string">&quot;new_promote&quot;</span>)]</span></span>
<span class="line">    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">new_promote</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">..</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">utils</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Adding feature for the promotion, the user enable the specific feature. Then they can use the specific type of promotion.</p>`,19)]))}const l=n(o,[["render",p],["__file","type_promote.html.vue"]]),c=JSON.parse('{"path":"/dev_guide/type_promote/type_promote.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"Type Promote","slug":"type-promote","link":"#type-promote","children":[]},{"level":3,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"Core Traits","slug":"core-traits","link":"#core-traits","children":[]},{"level":3,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]},{"level":3,"title":"Note","slug":"note","link":"#note","children":[]},{"level":3,"title":"How","slug":"how","link":"#how","children":[]}],"git":{"updatedTime":1738733097000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"120760306+Jianqoq@users.noreply.github.com","commits":1,"url":"https://github.com/Jianqoq"}]},"filePathRelative":"dev_guide/type_promote/type_promote.md"}');export{l as comp,c as data};
