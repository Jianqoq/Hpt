import{_ as e,c as t,a as s,b as o,d as p,r as l,o as c}from"./app-DXqrPI4k.js";const i={};function r(u,n){const a=l("Mermaid");return c(),t("div",null,[n[0]||(n[0]=s("h1",null,"Memory Allocator",-1)),n[1]||(n[1]=s("p",null,"This document describes the design and implementation of the LRU cache-based memory allocator used in the project.",-1)),n[2]||(n[2]=s("h2",null,"Architecture",-1)),n[3]||(n[3]=s("p",null,"The memory allocator consists of the following components:",-1)),o(a,{id:"mermaid-12",code:"eJxLL0osyFAIceFSAALHaN/U3PyiSgXHnJz85MSS/KJYBV1dOwWnaOeAUCRBiGKwlHO0c6iLI7qcE1jOJdonKFTBOTE5IxVZ2DU6KDUttSg1LzlVwTm/NK8kFarLGSztBjERTStEzh0ih0U/AFRcOHc="}),n[4]||(n[4]=p(`<h2>Core Components</h2><h3>1. Allocator Trait</h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Allocator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">allocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> layout<span class="token punctuation">:</span> <span class="token class-name">Layout</span><span class="token punctuation">,</span> device_id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">deallocate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> layout<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Layout</span><span class="token punctuation">,</span> device_id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">insert_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ptr<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> device_id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2. Storage Trait</h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Storage</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">increment_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ptr<span class="token punctuation">:</span> <span class="token class-name">SafePtr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">fn</span> <span class="token function-definition function">decrement_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ptr<span class="token punctuation">:</span> <span class="token class-name">SafePtr</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Memory Management Strategy</h2><h3>LRU Cache Strategy</h3><ol><li><p><strong>Allocation Process</strong>:</p><ul><li>Check if memory with the same layout exists in cache</li><li>If found, retrieve from cache</li><li>If not found, allocate new memory</li><li>If cache is full, free least recently used memory</li></ul></li><li><p><strong>Deallocation Process</strong>:</p><ul><li>Decrease reference count</li><li>When reference count reaches 0: <ul><li>Remove from allocated set</li><li>Put memory into cache</li><li>If cache is full, free least recently used memory</li></ul></li></ul></li></ol><h3>Reference Counting</h3><ul><li>Uses <code>HashMap</code> to store reference counts for each pointer</li><li>Manages references through <code>increment_ref</code> and <code>decrement_ref</code></li><li>Automatically recycles memory when reference count reaches 0</li></ul><h2>Safety Considerations</h2><ol><li><p><strong>Thread Safety</strong>:</p><ul><li>Global state protected by <code>Mutex</code></li><li><code>SafePtr</code> implements <code>Send</code> and <code>Sync</code> traits</li></ul></li><li><p><strong>Memory Safety</strong>:</p><ul><li>Automatic null pointer checks</li><li>Prevention of double-free</li><li>Automatic cleanup of all memory on program exit</li></ul></li></ol><h2>Usage Examples</h2><h3>CPU Memory Allocation</h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token keyword">mut</span> allocator <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> align<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> ptr <span class="token operator">=</span> allocator<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>CUDA Memory Allocation</h3><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token keyword">mut</span> allocator <span class="token operator">=</span> <span class="token constant">CUDA_CACHE</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">from_size_align</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> align<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> device<span class="token punctuation">)</span> <span class="token operator">=</span> allocator<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> device_id<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Implementation Details</h2><h3>Global Cache</h3><p>The allocator uses a global cache to manage memory lifetime. See implementation <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-allocator/src/allocators/cpu.rs#L11" target="_blank" rel="noopener noreferrer">here</a>.</p><h3>Memory Pool</h3><p>Memory pools are used to reduce allocation overhead:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MemoryPool</span> <span class="token punctuation">{</span></span>
<span class="line">    cache<span class="token punctuation">:</span> <span class="token class-name">LRUCache</span><span class="token operator">&lt;</span><span class="token class-name">Layout</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    allocated<span class="token punctuation">:</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    ref_count<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Best Practices</h2><ol><li><p><strong>Memory Leak Prevention</strong>:</p><ul><li>Ensure proper reference count management</li><li>Use RAII pattern for resource management</li><li>Check for leaks on program exit</li></ul></li><li><p><strong>Performance Optimization</strong>:</p><ul><li>Use LRU cache to reduce allocation overhead</li><li>Minimize memory fragmentation</li><li>Batch allocations when possible</li></ul></li></ol>`,25))])}const d=e(i,[["render",r]]),m=JSON.parse('{"path":"/dev_guide/allocation/allocator.html","title":"Memory Allocator","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744835383000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"ljj1849532909@gmail.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"ee8463f9187eff59dd5650a34a651d2c879e0a5d","time":1744835383000,"email":"ljj1849532909@gmail.com","author":"Jianqoq","message":"Update .gitignore and remove package-lock.json"}]},"filePathRelative":"dev_guide/allocation/allocator.md"}');export{d as comp,m as data};
