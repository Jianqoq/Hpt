import{_ as s,c as a,d as e,o as p}from"./app-DyYLPfhf.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1>from_raw</h1><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">unsafe</span> <span class="token keyword">fn</span> <span class="token function-definition function">from_raw</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Shape</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token class-name">CudaSlice</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> shape<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Creates a new tensor from an existing raw pointer and shape without taking ownership of the memory.</p><h2>Note</h2><p>This method allows you to create a tensor that uses an existing memory allocation. The tensor will use the provided memory without allocating new memory or taking ownership of it. This is useful for integrating with external libraries or when you want to manually manage memory.</p><h2>Parameters:</h2><p><code>data</code>: A <code>CudaSlice&lt;T&gt;</code> pointing to the pre-allocated memory on the CUDA device</p><p><code>shape</code>: The shape to use for the tensor, which can be any type that can be converted to Shape</p><h2>Returns:</h2><p>Tensor with type <code>T</code></p><h2>Examples:</h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span>backend<span class="token punctuation">::</span></span><span class="token class-name">Cuda</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span>re_exports<span class="token punctuation">::</span></span>cudarc<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">common<span class="token punctuation">::</span></span><span class="token class-name">Shape</span><span class="token punctuation">,</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">TensorError</span><span class="token punctuation">,</span> <span class="token class-name">Tensor</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// In a real scenario, this would come from an external source</span></span>
<span class="line">    <span class="token comment">// or be created through another API</span></span>
<span class="line">    <span class="token keyword">let</span> device <span class="token operator">=</span> <span class="token namespace">cudarc<span class="token punctuation">::</span>driver<span class="token punctuation">::</span></span><span class="token class-name">CudaDevice</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> values<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> cuda_slice <span class="token operator">=</span> device<span class="token punctuation">.</span><span class="token function">htod_copy</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Create a 2x3 tensor using the existing memory</span></span>
<span class="line">    <span class="token keyword">let</span> shape <span class="token operator">=</span> <span class="token class-name">Shape</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> tensor <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">from_raw</span><span class="token punctuation">(</span>cuda_slice<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> tensor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should print the 2x3 tensor with the values</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Note: When the tensor is dropped, it will NOT deallocate the memory</span></span>
<span class="line">    <span class="token comment">// since it did not take ownership of it</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// you will need to call \`forget\`</span></span>
<span class="line">    <span class="token comment">// the forget method will track the reference count of the memory</span></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>raw_ptr<span class="token punctuation">,</span> layout<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> tensor<span class="token punctuation">.</span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// raw_ptr drop will be called when tensor goes out of scope, memory will be deallocated</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/user_guide/associated_methods/cuda/from_raw.html","title":"from_raw","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745030351000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"120760306+Jianqoq@users.noreply.github.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"7628a2dd5bede6c1d10ddbef8b2ed756620a6efc","time":1745030351000,"email":"120760306+Jianqoq@users.noreply.github.com","author":"Jianqoq","message":"Merge pull request #181 from Jianqoq/Jianqoq"}]},"filePathRelative":"user_guide/associated_methods/cuda/from_raw.md"}');export{i as comp,u as data};
