import{_ as s,c as a,d as t,o as p}from"./app--uQ_sZr1.js";const e={};function o(l,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1>strided_map_simd</h1><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">strided_map_simd</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">,</span> vec_f<span class="token punctuation">:</span> <span class="token constant">F2</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ParStridedMap</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Applies two functions to process data: one for scalar operations and one for vectorized (SIMD) operations, enabling faster processing through hardware acceleration.</p><h2>Notes</h2><ul><li>Automatically falls back to scalar function when SIMD is not possible</li></ul><h2>Parameters</h2><ul><li><code>self</code>: The parallel SIMD iterator <ul><li>Type: <code>ParStridedSimd&lt;T&gt;</code></li></ul></li><li><code>f</code>: The scalar mapping function <ul><li>Type: <code>FnMut((&amp;mut T, T))</code></li><li>Used for non-vectorized elements</li></ul></li><li><code>vec_f</code>: The SIMD mapping function <ul><li>Type: <code>FnMut((&amp;mut Simd&lt;T&gt;, Simd&lt;T&gt;))</code></li><li>Used for vectorized operations</li></ul></li></ul><h2>Returns</h2><p>A <code>ParStridedMapSimd</code> iterator</p><h2>Examples:</h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">anyhow<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1f64</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> res <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">par_iter_simd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strided_map_simd</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token operator">*</span>res <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span></span>
<span class="line">            res<span class="token punctuation">.</span><span class="token function">write_unaligned</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">_sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Backend Support</h2><table><thead><tr><th>Backend</th><th>Supported</th></tr></thead><tbody><tr><td>CPU</td><td>✅</td></tr><tr><td>Cuda</td><td>❌</td></tr></tbody></table>`,13)]))}const i=s(e,[["render",o],["__file","strided_map_simd.html.vue"]]),u=JSON.parse('{"path":"/user_guide/iterator/strided_map_simd.html","title":"strided_map_simd","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Notes","slug":"notes","link":"#notes","children":[]},{"level":2,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":2,"title":"Returns","slug":"returns","link":"#returns","children":[]},{"level":2,"title":"Examples:","slug":"examples","link":"#examples","children":[]},{"level":2,"title":"Backend Support","slug":"backend-support","link":"#backend-support","children":[]}],"git":{"updatedTime":1741198455000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"120760306+Jianqoq@users.noreply.github.com","commits":1,"url":"https://github.com/Jianqoq"}]},"filePathRelative":"user_guide/iterator/strided_map_simd.md"}');export{i as comp,u as data};
