import{_ as t,c as r,d as o,o as a}from"./app-C-HddmYY.js";const i={};function n(s,e){return a(),r("div",null,e[0]||(e[0]=[o('<h3>Iterator</h3><p>Iterator are implemented using Rayon trait <code>UnindexedProducer</code>, the tasks are splitted in <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-iterator/src/par_strided.rs#L541" target="_blank" rel="noopener noreferrer">split</a> method. The main loop is happened in <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-iterator/src/par_strided_zip.rs#L471" target="_blank" rel="noopener noreferrer">fold_with</a>. Iterator can be used to implement elementwise or broadcast elementwise calculations. Usage can be found at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt/src/ops/cpu/utils/binary/binary_normal.rs#L46" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt/src/ops/cpu/utils/unary/unary.rs#L19" target="_blank" rel="noopener noreferrer">here</a></p><h3>Known issue</h3><ol><li><p>Current iterator like <code>ParStrided</code>, the <code>fold_with</code> method doesn&#39;t have any looping logic. Maybe we can write same logic as <code>ParStridedZip</code> in <code>fold_with</code>.</p></li><li><p>When outer loop size is 1, there will be no parallelism because the tasks splits based on the outer loop size.</p></li></ol>',4)]))}const l=t(i,[["render",n]]),c=JSON.parse('{"path":"/dev_guide/iterator/iterator.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744897060000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"ljj1849532909@gmail.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"1d8240c50ac6273e8b8e5567de63dd91a7ba0fb4","time":1744897060000,"email":"ljj1849532909@gmail.com","author":"Jianqoq","message":"Refactor test code for clarity and consistency"}]},"filePathRelative":"dev_guide/iterator/iterator.md"}');export{l as comp,c as data};
