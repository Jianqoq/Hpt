import{_ as t,c as a,d as n,o as s}from"./app-DrZN1xR-.js";const r={};function o(p,e){return s(),a("div",null,e[0]||(e[0]=[n(`<h1>Scalar Types</h1><p>This document describes the scalar type system in Hpt.</p><h2>Supported Types</h2><p>Hpt implements math methods for the following types:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">bool</span></span>
<span class="line"><span class="token keyword">i8</span></span>
<span class="line"><span class="token keyword">u8</span></span>
<span class="line"><span class="token keyword">i16</span></span>
<span class="line"><span class="token keyword">u16</span></span>
<span class="line"><span class="token keyword">i32</span></span>
<span class="line"><span class="token keyword">u32</span></span>
<span class="line"><span class="token keyword">i64</span></span>
<span class="line"><span class="token keyword">u64</span></span>
<span class="line"><span class="token keyword">f32</span></span>
<span class="line"><span class="token keyword">f64</span></span>
<span class="line"><span class="token namespace">half<span class="token punctuation">::</span></span>f16</span>
<span class="line"><span class="token namespace">half<span class="token punctuation">::</span></span>bf16</span>
<span class="line"><span class="token class-name">Complex32</span></span>
<span class="line"><span class="token class-name">Complex64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Common Traits</h3><p><code>pub trait FloatOutBinary&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L49" target="_blank" rel="noopener noreferrer">FloatOutBinary</a></p><p><code>pub trait FloatOutBinary2</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L65" target="_blank" rel="noopener noreferrer">FloatOutBinary2</a></p><p><code>pub trait NormalOut&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L78" target="_blank" rel="noopener noreferrer">NormalOut</a></p><p><code>pub trait NormalOut2</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L103" target="_blank" rel="noopener noreferrer">NormalOut2</a></p><p><code>pub trait NormalOutUnary</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L141" target="_blank" rel="noopener noreferrer">NormalOutUnary</a></p><p><code>pub trait NormalOutUnary2</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L176" target="_blank" rel="noopener noreferrer">NormalOutUnary2</a></p><p><code>pub trait BitWiseOut&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L213" target="_blank" rel="noopener noreferrer">BitWiseOut</a></p><p><code>pub trait BitWiseOut2</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L231" target="_blank" rel="noopener noreferrer">BitWiseOut2</a></p><p><code>pub trait Cmp&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L251" target="_blank" rel="noopener noreferrer">Cmp</a></p><p><code>pub trait SimdCmp&lt;RHS = Self&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L270" target="_blank" rel="noopener noreferrer">SimdCmp</a></p><p><code>pub trait Eval</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L320" target="_blank" rel="noopener noreferrer">Eval</a></p><p><code>pub trait Eval2</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L332" target="_blank" rel="noopener noreferrer">Eval2</a></p><p><code>pub trait FloatOutUnary</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L348" target="_blank" rel="noopener noreferrer">FloatOutUnary</a></p><p><code>pub trait FloatOutUnary2</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/type_promote.rs#L463" target="_blank" rel="noopener noreferrer">FloatOutUnary2</a></p><p><code>pub trait Cast&lt;T&gt;</code> See implementation at <a href="https://github.com/Jianqoq/Hpt/blob/d9a51874b3447d562b7c9d043b50eb05259b78c4/hpt-types/src/cast.rs#L6" target="_blank" rel="noopener noreferrer">Cast</a></p><h3>Usage</h3><p>In hpt, all the computation will be done by using these methods. If you are a developer want to implement a new method for Tensor, you will need to use these traits bounds. If you found that implement your new method for Tensor requires to write tons of trait bounds, you probabaly want to implement the method for scalar directly, then use this scalar method in Tensor impl by simply added one trait bound.</p><h3>Simd</h3><p>All the scalar implemented also has their own simd type. It can be 128bit, 256bit, or 512bit, it depends on the machine.</p><h3>Known issue</h3><p>Since I don&#39;t have avx512 CPU in hand, I can&#39;t test and make sure the 512bit code can compile.</p>`,27)]))}const i=t(r,[["render",o],["__file","scalar.html.vue"]]),c=JSON.parse('{"path":"/dev_guide/scalar/scalar.html","title":"Scalar Types","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Supported Types","slug":"supported-types","link":"#supported-types","children":[{"level":3,"title":"Common Traits","slug":"common-traits","link":"#common-traits","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Simd","slug":"simd","link":"#simd","children":[]},{"level":3,"title":"Known issue","slug":"known-issue","link":"#known-issue","children":[]}]}],"git":{"updatedTime":1741849105000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"120760306+Jianqoq@users.noreply.github.com","commits":1,"url":"https://github.com/Jianqoq"}]},"filePathRelative":"dev_guide/scalar/scalar.md"}');export{i as comp,c as data};
