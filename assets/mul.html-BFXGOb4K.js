import{_ as a,c as n,d as t,o as p}from"./app-C-HddmYY.js";const e={};function o(l,s){return p(),n("div",null,s[0]||(s[0]=[t(`<h1>mul</h1><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Mul</span><span class="token punctuation">::</span><span class="token function">mul</span><span class="token punctuation">(</span></span>
<span class="line">    x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token operator">&gt;</span> <span class="token operator">|</span> scalar<span class="token punctuation">,</span> </span>
<span class="line">    y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">B</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">B</span><span class="token operator">&gt;</span> <span class="token operator">|</span> scalar</span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compute <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="1.2em"><mi>x</mi><mo>∗</mo><mi>y</mi></mstyle></mrow><annotation encoding="application/x-tex">\\large x * y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5583em;"></span><span class="mord mathnormal sizing reset-size6 size7">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin sizing reset-size6 size7">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.2333em;"></span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.03588em;">y</span></span></span></span> for all elements</p><h2>Parameters:</h2><p><code>x</code>: First input tensor</p><p><code>y</code>: Second input tensor</p><h2>Returns:</h2><p>Tensor with type <code>C</code></p><h2>Examples:</h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Tensor</span><span class="token punctuation">,</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">TensorError</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token operator">*</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Backend Support</h2><table><thead><tr><th>Backend</th><th>Supported</th></tr></thead><tbody><tr><td>CPU</td><td>✅</td></tr><tr><td>Cuda</td><td>✅</td></tr></tbody></table>`,12)]))}const i=a(e,[["render",o]]),r=JSON.parse('{"path":"/user_guide/binary/mul.html","title":"mul","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744897060000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"ljj1849532909@gmail.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"1d8240c50ac6273e8b8e5567de63dd91a7ba0fb4","time":1744897060000,"email":"ljj1849532909@gmail.com","author":"Jianqoq","message":"Refactor test code for clarity and consistency"}]},"filePathRelative":"user_guide/binary/mul.md"}');export{i as comp,r as data};
