import{_ as s,c as a,d as p,o as t}from"./app-CMZGPQLm.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1>batchnorm_conv2d</h1><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">batchnorm_conv2d</span><span class="token punctuation">(</span></span>
<span class="line">        x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        kernels<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        mean<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        var<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        gamma<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        beta<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        bias<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        eps<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span></span>
<span class="line">        steps<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i64</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        padding<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i64</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        dilation<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i64</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        algo<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">ConvAlgo</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Tensor</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Performs a 2D convolution operation followed by batch normalization in a single fused operation for improved performance.</p><h2>Parameters:</h2><p><code>x</code>: Input tensor with shape <code>[batch_size, height, width, in_channels]</code></p><p><code>kernels</code>: Convolution kernels tensor with shape <code>[out_channels, kernel_height, kernel_width, in_channels]</code></p><p><code>mean</code>: Mean values for batch normalization with shape <code>[out_channels]</code></p><p><code>var</code>: Variance values for batch normalization with shape <code>[out_channels]</code></p><p><code>gamma</code>: Scale parameter for batch normalization with shape <code>[out_channels]</code></p><p><code>beta</code>: Shift parameter for batch normalization with shape <code>[out_channels]</code></p><p><code>bias</code>: Optional bias tensor with shape <code>[out_channels]</code></p><p><code>eps</code>: Small constant added to the variance for numerical stability</p><p><code>steps</code>: Convolution stride as <code>[step_height, step_width]</code></p><p><code>padding</code>: Padding size as <code>[padding_height, padding_width]</code></p><p><code>dilation</code>: Kernel dilation factors as <code>[dilation_height, dilation_width]</code></p><p><code>algo</code>: Optional algorithm to use, None will auto select</p><h2>Returns:</h2><p>Tensor with type <code>T</code></p><h2>Examples:</h2><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">hpt<span class="token punctuation">::</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token namespace">backend<span class="token punctuation">::</span></span><span class="token class-name">Cuda</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">common<span class="token punctuation">::</span></span><span class="token class-name">TensorInfo</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">TensorError</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token namespace">ops<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">CudaConvBatchNorm</span><span class="token punctuation">,</span> <span class="token class-name">Random</span><span class="token punctuation">,</span> <span class="token class-name">TensorCreator</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name">Tensor</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TensorError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// [batch_size, height, width, in_channels]</span></span>
<span class="line">    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// [out_channels, kernel_height, kernel_width, in_channels]</span></span>
<span class="line">    <span class="token keyword">let</span> kernels <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Batch normalization parameters</span></span>
<span class="line">    <span class="token keyword">let</span> mean <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> var <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> gamma <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> beta <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Optional convolution bias</span></span>
<span class="line">    <span class="token keyword">let</span> bias <span class="token operator">=</span> <span class="token class-name">Tensor</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token class-name">Cuda</span><span class="token operator">&gt;</span><span class="token punctuation">::</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Perform fused convolution with batch normalization</span></span>
<span class="line">    <span class="token keyword">let</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">batchnorm_conv2d</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&amp;</span>kernels<span class="token punctuation">,</span></span>
<span class="line">        <span class="token operator">&amp;</span>mean<span class="token punctuation">,</span></span>
<span class="line">        <span class="token operator">&amp;</span>var<span class="token punctuation">,</span></span>
<span class="line">        <span class="token operator">&amp;</span>gamma<span class="token punctuation">,</span></span>
<span class="line">        <span class="token operator">&amp;</span>beta<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bias<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">1e-5</span><span class="token punctuation">,</span>   <span class="token comment">// epsilon</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// stride</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// padding</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// dilation</span></span>
<span class="line">        <span class="token class-name">None</span><span class="token punctuation">,</span>   <span class="token comment">// auto select algo</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Output shape: {:?}&quot;</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 32, 32, 16]</span></span>
<span class="line">    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/user_guide/conv/cuda/batchnorm_conv2d.html","title":"batchnorm_conv2d","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744898497000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"ljj1849532909@gmail.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"1348819f0a3d8f5d5425af486b45bab02602f888","time":1744898497000,"email":"ljj1849532909@gmail.com","author":"Jianqoq","message":"use f32 as test type"}]},"filePathRelative":"user_guide/conv/cuda/batchnorm_conv2d.md"}');export{i as comp,u as data};
