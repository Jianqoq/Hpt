import{_ as e,c as t,o as i}from"./app-DyYLPfhf.js";const o={};function a(r,s){return i(),t("div")}const l=e(o,[["render",a]]),m=JSON.parse('{"path":"/","title":"","lang":"zh-CN","frontmatter":{"home":true,"heroText":"HPT","tagline":"High Performance Tensor Library","actions":[{"text":"User Guide","link":"/user_guide/user_guide","type":"primary"},{"text":"Dev Guide","link":"/dev_guide/dev_guide","type":"primary"}],"features":[{"title":"Ease To Use","details":"Simple and intuitive API design with comprehensive documentation and examples."},{"title":"Customizable","details":"Support user custom data type, custom memory allocator"},{"title":"Memory Layout","details":"Optimized memory layout with support for both contiguous and strided tensors."},{"title":"SIMD Support","details":"Leverages CPU SIMD instructions (SSE/AVX/NEON) for vectorized operations."},{"title":"Iterator API","details":"Flexible iterator API for efficient element-wise/broadcast operations and custom implementations."},{"title":"Multi-Threading","details":"Auto efficient parallel processing for CPU-intensive operations."},{"title":"Broadcasting","details":"Automatic shape broadcasting for element-wise operations, similar to NumPy."},{"title":"Type Safe","details":"Strong type system ensures correctness at compile time, preventing runtime errors."},{"title":"Zero-Copy","details":"Minimizes memory overhead with zero-copy operations and efficient data sharing."}],"footer":"Copyright Â© 2024"},"git":{"updatedTime":1745030351000,"contributors":[{"name":"Jianqoq","username":"Jianqoq","email":"120760306+Jianqoq@users.noreply.github.com","commits":1,"url":"https://github.com/Jianqoq"}],"changelog":[{"hash":"7628a2dd5bede6c1d10ddbef8b2ed756620a6efc","time":1745030351000,"email":"120760306+Jianqoq@users.noreply.github.com","author":"Jianqoq","message":"Merge pull request #181 from Jianqoq/Jianqoq"}]},"filePathRelative":"README.md"}');export{l as comp,m as data};
